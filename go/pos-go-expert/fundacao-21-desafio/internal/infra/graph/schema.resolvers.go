package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"

	"github.com/taranttini/study/go/pos-go-expert/fundacao-21-desafio/internal/infra/graph/model"
)

// Order is the resolver for the order field.
func (r *itemResolver) Order(ctx context.Context, obj *model.Item) (*model.Order, error) {
	order, err := r.OrderDB.FindByItemId(obj.ID)

	if err != nil {
		fmt.Println(err.Error())
		return nil, err
	}

	return &model.Order{
		ID:   order.Id,
		Data: order.Data,
	}, nil
	//panic(fmt.Errorf("not implemented: Order - order"))
}

// CreateOrder is the resolver for the createOrder field.
func (r *mutationResolver) CreateOrder(ctx context.Context, input model.NewOrder) (*model.Order, error) {
	order, err := r.OrderDB.Create(input.Data)
	if err != nil {
		return nil, err
	}

	return &model.Order{
		ID:   order.Id,
		Data: order.Data,
	}, nil
	//panic(fmt.Errorf("not implemented: CreateOrder - createOrder"))
}

// CreateItem is the resolver for the createItem field.
func (r *mutationResolver) CreateItem(ctx context.Context, input model.NewItem) (*model.Item, error) {
	item, err := r.ItemDB.Create(input.OrderID, input.Description, input.Qty, input.Value)
	if err != nil {
		return nil, err
	}

	return &model.Item{
		ID:          item.Id,
		Description: item.Description,
		Qty:         item.Qty,
		Value:       item.Value,
		//Order: ,
	}, nil
	//panic(fmt.Errorf("not implemented: CreateItem - createItem"))
}

// Items is the resolver for the items field.
func (r *orderResolver) Items(ctx context.Context, obj *model.Order) ([]*model.Item, error) {
	items, err := r.ItemDB.FindByOrderId(obj.ID)
	if err != nil {
		return nil, err
	}

	var itemsModel []*model.Item
	for _, item := range items {
		itemsModel = append(itemsModel, &model.Item{
			ID:          item.Id,
			Description: item.Description,
			Qty:         item.Qty,
			Value:       item.Value,
		})
	}

	return itemsModel, nil
	//panic(fmt.Errorf("not implemented: Items - items"))
}

// Orders is the resolver for the orders field.
func (r *queryResolver) Orders(ctx context.Context) ([]*model.Order, error) {
	orders, err := r.OrderDB.FindAll()
	if err != nil {
		return nil, err
	}

	var ordersModel []*model.Order
	for _, order := range orders {
		ordersModel = append(ordersModel, &model.Order{
			ID:   order.Id,
			Data: order.Data,
		})
	}

	return ordersModel, nil
	//panic(fmt.Errorf("not implemented: Orders - orders"))
}

// Items is the resolver for the items field.
func (r *queryResolver) Items(ctx context.Context) ([]*model.Item, error) {
	items, err := r.ItemDB.FindAll()
	if err != nil {
		return nil, err
	}

	var itemsModel []*model.Item
	for _, item := range items {
		itemsModel = append(itemsModel, &model.Item{
			ID:          item.Id,
			Description: item.Description,
			Qty:         item.Qty,
			Value:       item.Value,
		})
	}

	return itemsModel, nil
	//panic(fmt.Errorf("not implemented: Items - items"))
}

// Item returns ItemResolver implementation.
func (r *Resolver) Item() ItemResolver { return &itemResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Order returns OrderResolver implementation.
func (r *Resolver) Order() OrderResolver { return &orderResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type itemResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type orderResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
